 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tenants", type: :request do

  let!(:tenant) { create(:tenant) }

  describe "GET /index" do
    it "renders a successful response" do
      create(:tenant)

      get tenants_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get tenant_url(tenant, locale: :en)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_tenant_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      get edit_tenant_url(tenant, locale: :en)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Tenant" do
        build_tenant = build(:tenant)
        expect {
          post tenants_url, params: { tenant: { name: build_tenant.name, tenant_key: build_tenant.tenant_key } }
        }.to change(Tenant, :count).by(1)
      end

      it "redirects to the created tenant" do
        build_tenant = build(:tenant)
        post tenants_url, params: { tenant: { name: build_tenant.name, tenant_key: build_tenant.tenant_key } }
        expect(response).to redirect_to(tenant_url(Tenant.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Tenant" do
        expect {
          post tenants_url, params: { tenant: {name: ''} }
        }.to change(Tenant, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post tenants_url, params: { tenant: {name: ''} }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do

      it "updates the requested tenant" do
        patch tenant_url(tenant, locale: :en), params: { tenant: {name: 'update-name'} }
        tenant.reload
       
        expect(tenant.name).to eq 'update-name'
      end

      it "redirects to the tenant" do
        patch tenant_url(tenant, locale: :en), params: { tenant: {name: 'update-name'} }
        tenant.reload
        expect(response).to redirect_to(tenant_url(tenant))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch tenant_url(tenant, locale: :en), params: { tenant: {name: ''} }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested tenant" do
      expect {
        delete tenant_url(tenant, locale: :en)
      }.to change(Tenant, :count).by(-1)
    end

    it "redirects to the tenants list" do
      delete tenant_url(tenant, locale: :en)
      expect(response).to redirect_to(tenants_url)
    end
  end
end
