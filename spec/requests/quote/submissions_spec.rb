 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/quote/submissions", type: :request do

  describe "GET /index" do
    it "renders a successful response" do
      submission = create(:quote_submission)
      create(:quote_contact, submission: submission)
      create(:quote_delivery_address, submission: submission)
      create(:quote_pickup_address, submission: submission)

      get quote_submissions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      quote_submission = create(:quote_submission)

      get quote_submission_url(quote_submission, locale: :en)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_quote_submission_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      quote_submission = create(:quote_submission)

      get edit_quote_submission_url(quote_submission, locale: :en)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    let(:attrs) do
      {
        pickup_address_attributes: {
          name: "Wat Phnom, ផ្លូវវត្តភ្នំ, រាជធានី​ភ្នំពេញ",
          lat: "11.5659647",
          lon: "104.9150842",
        },

        delivery_address_attributes: {
          name: "Banlung, ក្រុងបានលុង, Ratanakiri",
          lat: "13.7375463",
          lon: "106.9775092"
        },

        shipment_items_attributes: [{
          width: 40,
          length: 20,
          height: 35,
          dimension_unit: 'cm',

          weight: 30,
          weight_unit: 'kg'
        }],

        contact_attributes: {
          name: 'Joean',
          email: 'joeann@gmail.com',
          phone_number: '0972223334',
          title: 'mrs.',

        }
      }
      
    end

    context "with valid parameters" do
      it "creates a new Quote::Submission" do
        expect {
          post quote_submissions_url(locale: :en), params: { quote_submission: attrs }
        }.to change(Quote::Submission, :count).by(1)
      end

      it "redirects to the created quote_submission" do
        post quote_submissions_url(locale: :en), params: { quote_submission: attrs }
        expect(response).to redirect_to(quote_submission_url(Quote::Submission.last, locale: :en))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Quote::Submission" do
      
        attrs[:contact_attributes][:name] = nil

        expect {
          post quote_submissions_url(locale: :en), params: { quote_submission: attrs }
        }.to change(Quote::Submission, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        attrs[:contact_attributes][:name] = nil
        post quote_submissions_url(locale: :en), params: { quote_submission: attrs }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    let(:submission) { create(:quote_submission)}
    let(:delivery_address) { create(:quote_delivery_address, submission: submission)}
    let(:pickup_address) { create(:quote_pickup_address, submission: submission)}
    let(:contact) { create(:quote_contact, submission: submission)}
    let(:shipment_item) { create(:quote_shipment_item, submission: submission)}

    let(:update_attrs) do
      {
        pickup_address_attributes: {
          id: pickup_address.id,
          name: "Wat Phnom",
          lat: "11",
          lon: "101",
        },

        delivery_address_attributes: {
          id: delivery_address.id,
          name: "Banlung",
          lat: "15",
          lon: "105"
        },

        shipment_items_attributes: [{
          id: shipment_item.id,
          width: 20,
          length: 30,
          height: 40,
          dimension_unit: 'm',

          weight: 60,
          weight_unit: 'lbs'
        }],

        contact_attributes: {
          id: contact.id,
          name: 'Jhone',
          email: 'jhone@gmail.com',
          phone_number: '012987654',
          title: 'mr.',
        }
      }
    end


    context "with valid parameters" do

      it "updates the requested quote_submission" do
        patch quote_submission_url(submission, locale: :en), params: { quote_submission: update_attrs }
        submission.reload

        expect(submission.pickup_address.name).to eq 'Wat Phnom'
        expect(submission.pickup_address.lat).to eq 11
        expect(submission.pickup_address.lon).to eq 101

        expect(submission.delivery_address.name).to eq 'Banlung'
        expect(submission.delivery_address.lat).to eq 15
        expect(submission.delivery_address.lon).to eq 105

        shipment = submission.shipment_items.first
        expect(shipment.width).to eq 20
        expect(shipment.length).to eq 30
        expect(shipment.height).to eq 40
        expect(shipment.weight).to eq 60
        
        expect(submission.contact.name).to eq 'Jhone'
        expect(submission.contact.email).to eq 'jhone@gmail.com'
        expect(submission.contact.phone_number).to eq '012987654'
        expect(submission.contact.title).to eq 'mr.'
      end

      it "redirects to the quote_submission" do
        patch quote_submission_url(submission, locale: :en), params: { quote_submission: update_attrs }
        submission.reload
        expect(response).to redirect_to(quote_submission_url(submission))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        update_attrs[:contact_attributes][:name] = nil

        patch quote_submission_url(submission, locale: :en), params: { quote_submission: update_attrs }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested quote_submission" do
      quote_submission = create(:quote_submission)

      expect {
        delete quote_submission_url(quote_submission, locale: :en)
      }.to change(Quote::Submission, :count).by(-1)
    end

    it "redirects to the quote_submissions list" do
      quote_submission = create(:quote_submission)

      delete quote_submission_url(quote_submission, locale: :en)
      expect(response).to redirect_to(quote_submissions_url(locale: :en))
    end
  end
end
